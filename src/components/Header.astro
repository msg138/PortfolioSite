---
export interface Props {
    pathPieces: Array<string>;
    shouldAnimate?: boolean;
}

const { pathPieces, shouldAnimate: shouldAnimateProp } = Astro.props;
let descriptorFocus = pathPieces[0] ?? 'me';
const shouldAnimate = shouldAnimateProp || descriptorFocus === 'who?';
if (descriptorFocus === 'who?') {
    descriptorFocus = 'me';
}
const descriptors = [
    {
        name: 'who?',
        path: '',
    }, ...[
    {
        name: 'a-developer',
        path: 'a-developer',
    },
    {
        name: 'a-blogger',
        path: 'a-blogger',
    },
    {
        name: 'a-gamer',
        path: 'a-gamer',
    },
    {
        name: 'me',
        path: 'me',
    },
].sort(({ path }) => (path === '' || path === descriptorFocus) ? 1 : -1)];
---
<>
<div class={`overlay${shouldAnimate ? '' : ' static'}`}>
</div>
<header class={`header${shouldAnimate ? '' : ' static'}`} id="header">
    <p class="title">
        <a
                class="main"
                href="/"
        >
            mikey.is/
        </a>
        <span class="descriptors">
            {descriptors.map((descriptor) => (
                <span class={`descriptor${descriptor.path === descriptorFocus ? ' active' : ''}`}>
                    {descriptor.name}
                </span>
            ))}
        </span>
    </p>
    <svg onclick="" class="menu" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>Menu</title><path fill-rule="evenodd" d="M4 8c-.55 0-1-.45-1-1s.45-1 1-1h16c.55 0 1 .45 1 1s-.45 1-1 1H4Zm0 5h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1Zm0 5h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1Z"></path><metadata>app, application, components, hamburger, interface, line, lines, menu, screen, site, ui, ux, web, website</metadata></svg>
</header>
</>
<style>
    @keyframes returnTitle {
        0% {
            top: 40vh;
            left: 50%;
            font-size: 4rem;
        }

        100% {
            top: 0;
            left: 0;
            font-size: 1.5rem;
        }
    }

    @keyframes fadeIn {
        0% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    @keyframes fadeOut {
        0% {
            opacity: 1;
            top: 0;
        }

        100% {
            opacity: 0;
            top: -20px;
        }
    }

    @keyframes introduction {
        0% {
            left: -200px;
        }

        100% {
            left: 0;
        }
    }

    @keyframes descriptor-intro {
        0% {
            opacity: 0;
            top: 100%;
        }

        100% {
            opacity: 1;
            top: 0;
        }
    }

    @keyframes overlayFade {
        0% {
            opacity: 1;
        }
        100% {
            opacity: 0;
            pointer-events: none;
        }
    }

    .overlay {
        width: 100vw;
        position: fixed;
        height: 100vw;
        display: block;
        background: white;
        opacity: 1;
        z-index: 2;
        pointer-events: all;
        animation: overlayFade 500ms 6200ms;
        animation-fill-mode: forwards;
    }

    .overlay.static {
        display: none;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 1200px;
        max-width: calc(100% - 2rem);
        position: relative;
        margin: auto;
        z-index: 3;
    }

    .title {
        left: 50%;
        top: 40vh;
        position: relative;
        animation: returnTitle 1500ms 5000ms;
        animation-fill-mode: forwards;
        display: flex;
        font-size: 4rem;
        margin: 0;
    }

    .title > span {
        background: white;
    }


    .main {
        position: relative;
        background: white;
        z-index: 3;
        color: black;
        text-decoration: none;
    }

    .descriptors {
        display: flex;
        flex-direction: column;
        position: relative;
        left: -200px;
        top: 0;
        white-space: nowrap;
        animation: introduction 1000ms 1000ms;
        animation-fill-mode: forwards;
    }

    .descriptor {
        opacity: 0;
        position: absolute;
    }

    .descriptor:nth-of-type(1) {
        opacity: 1;
        animation: fadeOut 300ms 2400ms;
        animation-fill-mode: forwards;
        color: #828e00;
    }

    .descriptor:nth-of-type(2) {
        animation: descriptor-intro 300ms 2500ms, fadeOut 300ms 3000ms;
        animation-fill-mode: forwards;
        color: #02841e;
    }

    .descriptor:nth-of-type(3) {
        animation: descriptor-intro 300ms 3100ms, fadeOut 300ms 3600ms;
        animation-fill-mode: forwards;
        color: #026a84;
    }

    .descriptor:nth-of-type(4) {
        animation: descriptor-intro 300ms 3700ms, fadeOut 300ms 4200ms;
        animation-fill-mode: forwards;
        color: #026a84;
    }

    .descriptor:nth-last-of-type(1) {
        animation: descriptor-intro 300ms 4300ms;
        animation-fill-mode: forwards;
        color: #730284;
    }

    .header.static .title {
        animation: none;
        top: 0;
        left: 0;
        font-size: 1.5rem;
    }

    .header.static .descriptor {
        animation: none;
    }

    .header.static .descriptor:nth-of-type(1) {
        opacity: 0;
    }

    .header.static .descriptor.active {
        opacity: 1;
    }

    .header.static .descriptors {
        animation: none;
        left: 0;
    }

    .menu {
        width: 2rem;
        height: 2rem;
        cursor: pointer;
        opacity: 0;
        animation: fadeIn 300ms 6000ms;
        animation-fill-mode: forwards;
    }

    .header.static .menu {
        opacity: 1;
        animation: none;
    }
</style>
<script>

</script>